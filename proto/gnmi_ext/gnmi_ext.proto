//
// Copyright 2018 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

// Package gnmi_ext defines a set of extensions messages which can be optionally
// included with the request and response messages of gNMI RPCs. A set of
// well-known extensions are defined within this file, along with a registry for
// extensions defined outside of this package.
package gnmi_ext;

import "google/protobuf/duration.proto";

option go_package = "github.com/openconfig/gnmi/proto/gnmi_ext";

// The Extension message contains a single gNMI extension.
message Extension {
  oneof ext {
    RegisteredExtension registered_ext = 1;    // A registered extension.
    // Well known extensions.
    MasterArbitration master_arbitration = 2;  // Master arbitration extension.
    History history = 3;                       // History extension.
    CommitConfirmed commit_confirmed = 4;      // Commit Confirmed extension.
  }
}

// The RegisteredExtension message defines an extension which is defined outside
// of this file.
message RegisteredExtension {
  ExtensionID id = 1; // The unique ID assigned to this extension.
  bytes msg = 2;      // The binary-marshalled protobuf extension payload.
}

// RegisteredExtension is an enumeration acting as a registry for extensions
// defined by external sources.
enum ExtensionID {
  EID_UNSET = 0;
  // New extensions are to be defined within this enumeration - their definition
  // MUST link to a reference describing their implementation.

  // An experimental extension that may be used during prototyping of a new
  // extension.
  EID_EXPERIMENTAL = 999;
}

// MasterArbitration is used to select the master among multiple gNMI clients
// with the same Roles. The client with the largest election_id is honored as
// the master.
// The document about gNMI master arbitration can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
message MasterArbitration {
  Role role = 1;
  Uint128 election_id = 2;
}

// Representation of unsigned 128-bit integer.
message Uint128 {
  uint64 high = 1;
  uint64 low = 2;
}

// There can be one master for each role. The role is identified by its id.
message Role {
  string id = 1;
  // More fields can be added if needed, for example, to specify what paths the
  // role can read/write.
}

// The History extension allows clients to request historical data. Its
// spec can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-history.md
message History {
  oneof request {
    int64 snapshot_time = 1; // Nanoseconds since the epoch
    TimeRange range = 2;
  }
}

message TimeRange {
  int64 start = 1; // Nanoseconds since the epoch
  int64 end = 2;   // Nanoseconds since the epoch
}

// The CommitID is returned by the gNMI server to indicate the ID of a commit.
// It is returned in response to the Set Request with the CommitConfirm message
// that had COMMIT_CONFIRMED_ACTION_START set.
// The CommitID is used in the subsequent SetRequest/CommitConfirm messages
// to identify commit to be confirmed, reset or rejected.
message CommitID {
  string id = 1;
}

// The CommitConfirmed allows automatic rollback of a commit
// if Set changes are not confirmed within the specified timeout.
// The document about gNMI commit confirmed can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-commit-confirmed.md
message CommitConfirmed {
  CommitConfirmedAction action = 1;
  // rollback timeout duration expressed in seconds and nanoseconds.
  // If timeout is not set (or seconds and ns are both 0), then
  // the default gNMI server's rollback timeout duration is used.
  google.protobuf.Duration timeout = 2;
  // CommitID from commit for ACCEPT or REJECT
  CommitID commit_id = 3;
}

// A COMMIT_CONFIRMED_ACTION_START starts a commit with a configured rollback
// timeout and will return the CommitID assigned by the server. The CommitID is
// used to identify the current commit. The COMMIT_CONFIRMED_ACTION_CONFIRM and
// COMMIT_CONFIRMED_ACTION_REJECT confirms or cancels a commit using the
// commit_id.
enum CommitConfirmedAction {
  // gNMI server should return InvalidArgument error if the action is not
  // specified for a CommitConfirmed extension.
  COMMIT_CONFIRMED_ACTION_UNSPECIFIED = 0;
  // Starts a commit with a specified rollback timeout
  // or resets the timeout for the commit that has confirmation pending.
  COMMIT_CONFIRMED_ACTION_START = 1;
  // Confirm a commit identified by CommitID.
  COMMIT_CONFIRMED_ACTION_CONFIRM = 2;
  // Reject a commit identified by CommitID
  // for which rollback timeout has not expired.
  // If no active commit with the non expired rollback timeout is found,
  // gNMI server should return InvalidArgument error.
  COMMIT_CONFIRMED_ACTION_REJECT = 3;
}